#!/usr/bin/env node
import { promises as fs } from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const packageRoot = path.resolve(path.dirname(__filename), '..');
const prismaDir = path.join(packageRoot, 'prisma');
const schemaDir = path.join(prismaDir, 'schema');
const generatedDir = path.join(prismaDir, '.generated');
const modelsDir = path.join(schemaDir, 'models');

const modelOrder = [
  'organization.prisma',
  'user.prisma',
  'aircraft.prisma',
  'component.prisma',
  'signatory.prisma',
  'document.prisma',
  'document_page.prisma',
  'source_reference.prisma',
  'maintenance_event.prisma',
  'maintenance_event_source.prisma',
  'directive.prisma',
  'maintenance_event_directive.prisma',
  'embedding.prisma',
  'audit_log.prisma',
  'compliance_snapshot.prisma',
  'due_item.prisma',
  'share.prisma',
];

async function collectModelFiles() {
  const entries = await fs.readdir(modelsDir);
  const extras = entries.filter(
    (entry) => entry.endsWith('.prisma') && !modelOrder.includes(entry),
  );

  if (extras.length > 0) {
    throw new Error(
      `Encountered unexpected Prisma model files: ${extras.join(", ")}. Update modelOrder in compose-schema.mjs to include them.`,
    );
  }

  return modelOrder.map((entry) => path.join(modelsDir, entry));
}

async function readFile(filePath) {
  return fs.readFile(filePath, 'utf8');
}

async function compose() {
  const filesInOrder = [
    path.join(schemaDir, 'root.prisma'),
    path.join(schemaDir, 'enums.prisma'),
    ...(await collectModelFiles()),
  ];

  const fileContents = await Promise.all(filesInOrder.map(readFile));
  const banner = [
    '// This file is auto-generated by `pnpm run --filter db compose`.',
    '// Do not edit directly; update the sources under prisma/schema instead.',
    '',
  ].join('\n');

  const composed = banner + fileContents.join('\n\n');
  await fs.mkdir(generatedDir, { recursive: true });
  const targetPath = path.join(generatedDir, 'schema.prisma');
  await fs.writeFile(targetPath, composed);
}

compose().catch((error) => {
  console.error('Failed to compose Prisma schema:', error);
  process.exitCode = 1;
});
